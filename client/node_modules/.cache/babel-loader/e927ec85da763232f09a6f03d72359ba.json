{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ajay/Desktop/DEVELOPMENT/To do list MERN/To_do_list/client/src/context.js\";\nimport React, { Component } from 'react';\nconst Context = /*#__PURE__*/React.createContext();\n\nconst reducer = (prevState, action) => {\n  switch (action.type) {\n    case \"TOGGLE\":\n      return {\n        todos: prevState.todos.map(t => {\n          if (t.id === action.payload) {\n            t.complete = !t.complete;\n          }\n\n          ;\n          return t;\n        })\n      };\n\n    case \"REMOVE\":\n      return {\n        todos: prevState.todos.filter(todo => todo.id !== action.payload)\n      };\n\n    default:\n      return prevState;\n  }\n};\n\nexport class Provider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todos: [{\n        id: 1,\n        title: \"check emails\",\n        complete: false\n      }, {\n        id: 2,\n        title: \"check voice\",\n        complete: false\n      }, {\n        id: 3,\n        title: \"check phone\",\n        complete: false\n      }],\n      dispatch: action => this.setState(prevState => reducer(prevState, action))\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Context.Provider, {\n      value: this.state,\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport const Consumer = Context.Consumer;","map":{"version":3,"sources":["/Users/ajay/Desktop/DEVELOPMENT/To do list MERN/To_do_list/client/src/context.js"],"names":["React","Component","Context","createContext","reducer","prevState","action","type","todos","map","t","id","payload","complete","filter","todo","Provider","state","title","dispatch","setState","render","props","children","Consumer"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,MAAMC,OAAO,gBAAEF,KAAK,CAACG,aAAN,EAAf;;AAEA,MAAMC,OAAO,GAAE,CAACC,SAAD,EAAWC,MAAX,KAAsB;AACjC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,QAAL;AACA,aAAO;AAACC,QAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBC,GAAhB,CAAoBC,CAAC,IAAI;AAAC,cAAGA,CAAC,CAACC,EAAF,KAASL,MAAM,CAACM,OAAnB,EAA4B;AAACF,YAAAA,CAAC,CAACG,QAAF,GAAY,CAAEH,CAAC,CAACG,QAAhB;AAAyB;;AAAA;AACnG,iBAAOH,CAAP;AAAU,SADS;AAAR,OAAP;;AAGJ,SAAK,QAAL;AACI,aAAO;AAACF,QAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,CAAgBM,MAAhB,CAAuBC,IAAI,IAAIA,IAAI,CAACJ,EAAL,KAAWL,MAAM,CAACM,OAAjD;AAAR,OAAP;;AACJ;AACI,aAAOP,SAAP;AARJ;AAWH,CAZD;;AAaA,OAAQ,MAAMW,QAAN,SAAuBf,SAAvB,CAAiC;AAAA;AAAA;AAAA,SACrCgB,KADqC,GAC/B;AACFT,MAAAA,KAAK,EAAC,CACF;AAACG,QAAAA,EAAE,EAAC,CAAJ;AACAO,QAAAA,KAAK,EAAC,cADN;AAEAL,QAAAA,QAAQ,EAAE;AAFV,OADE,EAIF;AAACF,QAAAA,EAAE,EAAC,CAAJ;AACAO,QAAAA,KAAK,EAAC,aADN;AAEAL,QAAAA,QAAQ,EAAE;AAFV,OAJE,EAOF;AAACF,QAAAA,EAAE,EAAC,CAAJ;AACAO,QAAAA,KAAK,EAAC,aADN;AAEAL,QAAAA,QAAQ,EAAE;AAFV,OAPE,CADJ;AAYFM,MAAAA,QAAQ,EAAEb,MAAD,IAAY,KAAKc,QAAL,CAAcf,SAAS,IAAID,OAAO,CAACC,SAAD,EAAWC,MAAX,CAAlC;AAZnB,KAD+B;AAAA;;AAerCe,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,OAAD,CAAS,QAAT;AAAkB,MAAA,KAAK,EAAE,KAAKJ,KAA9B;AAAA,gBACK,KAAKK,KAAL,CAAWC;AADhB;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AArBoC;AAyBzC,OAAO,MAAMC,QAAQ,GAAEtB,OAAO,CAACsB,QAAxB","sourcesContent":["import React, { Component } from 'react'\nconst Context =React.createContext()\n\nconst reducer =(prevState,action) => {\n    switch(action.type){\n        case \"TOGGLE\":\n        return {todos :prevState.todos.map(t => {if(t.id === action.payload) {t.complete =! t.complete};\n    return t })}\n\n    case \"REMOVE\" :\n        return {todos :prevState.todos.filter(todo => todo.id !==action.payload)}\n    default:\n        return prevState\n\n    }\n}\nexport  class Provider extends Component {\n    state={\n        todos:[\n            {id:1,\n            title:\"check emails\",\n            complete :false},\n            {id:2,\n            title:\"check voice\",\n            complete :false},\n            {id:3,\n            title:\"check phone\",\n            complete :false}\n        ],\n        dispatch:(action) => this.setState(prevState => reducer(prevState,action))\n    }\n    render() {\n        return (\n            <Context.Provider value={this.state}>\n                {this.props.children}\n            </Context.Provider>\n        )\n    }\n}\n\n\nexport const Consumer =Context.Consumer"]},"metadata":{},"sourceType":"module"}